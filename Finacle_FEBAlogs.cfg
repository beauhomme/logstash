input {

	kafka {
		bootstrap_servers => "127.0.0.1:9081,127.0.0.1:9081,127.0.0.1:9081"
		id => "ebankinglogs"
		topics => ["ebankinghif"]
		decorate_events => true
		codec => json
	}

}

filter {

    if "WARN - LoggingInfoVO={" in [flowfile] {

		mutate {
			copy => { "flowfile" => "message" }
		}

        mutate{
            add_field => ["logtype", "msglog"]
		}
		mutate{
			add_field => ["omessage", "%{message}"]
		}

		mutate {
			gsub => [ "omessage", "\r", "" ]
		}

		mutate {
			gsub => [ "omessage", "\n", "" ]
		}
		mutate {
			gsub => [ "omessage", "\t", "" ]
		}
		grok {
			match => [ "omessage", "%{CISCO_REASON}- LoggingInfoVO={message:############ FEBABusinessException ############------------>>!Debug Info%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}------------>>!Single Business Exception Info%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}------------>>!StackTrace}%{GREEDYDATA}"]

		}

		mutate {
			gsub => [ "omessage", "\{", "" ]
			gsub => [ "omessage", "\}", "" ]
			split => ["omessage" , "StackTrace"]
			add_field => ["_INFO", "%{[omessage][0]}" ]
			add_field => ["_PAYLOAD", "%{[omessage][1]}" ]
		}

		mutate {
			gsub => [ '_INFO', "\]\[", "],["]
			split => ['_INFO' , "------------>>!"]
			add_field => ["_INFO_UD", "%{[_INFO][1]}" ]
			add_field => ["_INFO_ED", "%{[_INFO][2]}" ]
		}

		kv {
			source => "_INFO_UD"
			field_split => "\],\["
			value_split => ":"
			trim_key => "<>\[\],"
			trim_value => "<>\[\],"
		}

		kv {
			source => "_INFO_ED"
			field_split => "\],\["
			value_split => ":"
			trim_key => "<>\[\],"
			trim_value => "<>\[\],"
		}

		geoip {
			source => "IP"
			target => "geoip"
			add_tag => [ "msg-geoip" ]
		   }

		mutate{
			remove_field => [ "_INFO_UD","_INFO_ED", "omessage", "_INFO", "_PAYLOAD", "flowfile"]
		}

	}

    else if "ERROR - LoggingInfoVO={" in [flowfile] {
		mutate {
			copy => { "flowfile" => "message" }
		}

        mutate{
            add_field => ["logtype", "errlog"]
		}

		mutate{
            add_field => ["omessage", "%{message}"]
		}

		mutate {
            gsub => [ "omessage", "\r", "" ]
		}

		mutate {
			gsub => [ "omessage", "\n", "" ]
		}
		mutate {
			gsub => [ "omessage", "\t", "" ]
		}

        if  "FEBAFatalException" in "omessage" {

            grok {
				match => [ "omessage", "%{CISCO_REASON}- LoggingInfoVO={message:############ FEBAFatalException ############------------>>!Debug Info%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}------------>>!Fatal Exception Info, hashCode=%{UUID}%{SYSLOG5424SD}------------>>!StackTrace}%{GREEDYDATA}"]
            }
        }

        else if "FEBACriticalException" in "omessage" {
            grok {
				match => [ "omessage", "%{CISCO_REASON}- LoggingInfoVO={message:############ FEBACriticalException ############------------>>!Debug Info%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}------------>>!Critical Exception Info%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}------------>>!StackTrace}%{GREEDYDATA}"]
            }
        }

		mutate {
			gsub => [ "omessage", "\{", "" ]
			gsub => [ "omessage", "\}", "" ]
			split => ["omessage" , "StackTrace"]
			add_field => ["_INFO", "%{[omessage][0]}" ]
			add_field => ["_PAYLOAD", "%{[omessage][1]}" ]
		}

		mutate {
			gsub => [ '_INFO', "\]\[", "],["]
			split => ['_INFO' , "------------>>!"]
			add_field => ["_INFO_UD", "%{[_INFO][1]}" ]
			add_field => ["_INFO_ED", "%{[_INFO][2]}" ]
		}


		kv {
			source => "_INFO_UD"
			field_split => "\],\["
			value_split => ":"
			trim_key => "<>\[\],"
			trim_value => "<>\[\],"
		}

		kv {
			source => "_INFO_ED"
			field_split => "\],\["
			value_split => ":"
			trim_key => "<>\[\],"
			trim_value => "<>\[\],"
		}

		geoip {
			source => "IP"
			target => "geoip"
			add_tag => [ "err-geoip" ]
		}

		mutate{
			remove_field => [ "_INFO_UD","_INFO_ED", "omessage", "_INFO", "_PAYLOAD", "flowfile"]
		}


	}

    else if "INFO - LoggingInfoVO={" in [flowfile] {

		mutate {
			copy => { "flowfile" => "message" }
		}

		mutate{
			add_field => ["logtype", "hiflog"]
		}

		mutate{
			add_field => ["omessage", "%{message}"]
		}

		mutate {
			gsub => [ "omessage", "\r", "" ]
		}

		mutate {
			gsub => [ "omessage", "\n", "" ]
		}
		mutate {
			gsub => [ "omessage", "\t", "" ]
		}

		grok {
			match => [ "omessage", "%{CISCO_REASON} - LoggingInfoVO={message:############ FEBADebug ############------------>>!User Info%{SYSLOG5424SD},%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD},%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}%{SYSLOG5424SD}------------>>!Debug Info%{SYSLOG5424SD}FEBAHTTPClient%{GREEDYDATA}"]
		}

		mutate {
			gsub => [ "omessage", "\{", "" ]
			gsub => [ "omessage", "\}", "" ]
			split => ["omessage" , "Debug Info"]
			add_field => ["_INFO", "%{[omessage][0]}" ]
			add_field => ["_PAYLOAD", "%{[omessage][1]}" ]
		}

		mutate {
			gsub => [ '_INFO', "\]\[", "],["]
			split => ['_INFO' , "------------>>!"]
			add_field => ["_INFO_UD", "%{[_INFO][1]}" ]
		}

		kv {
			source => "_INFO_UD"
			field_split => "\],\["
			value_split => ":"
			trim_key => "<>\[\],"
			trim_value => "<>\[\],"
		}

		geoip {
			source => "IP Address"
			target => "geoip"
			add_tag => [ "hif-geoip" ]
		}

		mutate{
			remove_field => [ "flowfile"]
		}

		if "Request details: " in [_PAYLOAD] and [_PAYLOAD] =~ "[a-zA-Z]{6}tInq.xsd"{

			mutate {
				gsub => [ "_PAYLOAD", "--------------------------------------------", "" ]
			}

			mutate{
				split => ["_PAYLOAD" , "Request content: "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
			}

			xml {
				source => "_PAYXML"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//MessageKey/RequestUUID/text()", "RequestUUID",
						"//MessageKey/ServiceRequestId/text()", "ServiceRequestId",
						"//MessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
						"//MessageKey/ChannelId/text()", "ChannelId",
						"//RequestMessageInfo/BankId/text()", "BankId",
						"//RequestMessageInfo/TimeZone/text()", "TimeZone",
						"//RequestMessageInfo/MessageDateTime/text()", "MessageDateTime",
						"//PasswordToken/UserId/text()", "UserId",
						"//CustAcctInqRq/CustId/text()", "CustId",
						"//CustAcctInqRq/CustType/text()", "CustType",
						"//RetCustInqRq/CustId/text()", "CustId"
						]
			}


			mutate{
				remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
			}
		}

		else if "Response received : " in [_PAYLOAD] and [_PAYLOAD] =~ "[a-zA-Z]{6}tInq.xsd"{

            mutate{
				split => ["_PAYLOAD" , "Response received : "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
            }

            xml {
				source => "_PAYXML"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//RequestMessageKey/RequestUUID/text()", "RequestUUID",
							"//RequestMessageKey/ServiceRequestId/text()", "ServiceRequestId",
							"//RequestMessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
							"//RequestMessageKey/ChannelId/text()", "ChannelId",
							"//ResponseMessageInfo/BankId/text()", "BankId",
							"//ResponseMessageInfo/TimeZone/text()", "TimeZone",
							"//ResponseMessageInfo/MessageDateTime/text()", "MessageDateTime",
							"//HostTransaction/Status/text()", "Response_Status"
                        ]
            }

            mutate{
                remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
            }
		}

		else if "bancsconnect.ISO8583Message" in [message] {

			mutate{
				add_field => ["pmessage", "%{message}"]
			}
			mutate {
				gsub => [ "pmessage", "\[", "" ]
				gsub => [ "pmessage", "\]", "" ]
			}

			mutate{
				add_field => ["ServiceRequestId", "bancsconnect"]
			}
			kv {
				source => "pmessage"
				field_split => "(\n|\r)"
				value_split => "="
				trim_key => "<>\[\],"
				trim_value => "<>\[\],"
			}

			mutate{
				remove_field => [ "pmessage", "INFO - LoggingInfoVO", "_PAYLOAD"]
			}

		}

		else if "Request content: " in [message] and "getCorpRetailIndicator" in [message]{
			mutate {
				gsub => [ "_PAYLOAD", "--------------------------------------------", "" ]
			}

			mutate{
				split => ["_PAYLOAD" , "Request content: "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
			}

			xml {
				source => "_PAYLOAD"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//MessageKey/RequestUUID/text()", "RequestUUID",
							"//MessageKey/ServiceRequestId/text()", "ServiceRequestId",
							"//MessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
							"//MessageKey/ChannelId/text()", "ChannelId",
							"//RequestMessageInfo/BankId/text()", "BankId",
							"//RequestMessageInfo/TimeZone/text()", "TimeZone",
							"//RequestMessageInfo/MessageDateTime/text()", "MessageDateTime",
							"//PasswordToken/UserId/text()", "UserId",
							"//CIFKey/cifID/text()", "cifID"
						]
                }

            mutate{
				remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
            }
		}

		else if "Response received : " in [message] and "getCorpRetailIndicator" in [message]{

			mutate{
				split => ["_PAYLOAD" , "Response received : "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
			}

			xml {
				source => "_PAYXML"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//RequestMessageKey/RequestUUID/text()", "RequestUUID",
						"//RequestMessageKey/ServiceRequestId/text()", "ServiceRequestId",
						"//RequestMessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
						"//RequestMessageKey/ChannelId/text()", "ChannelId",
						"//ResponseMessageInfo/BankId/text()", "BankId",
						"//ResponseMessageInfo/TimeZone/text()", "TimeZone",
						"//ResponseMessageInfo/MessageDateTime/text()", "MessageDateTime",
						"//HostTransaction/Status/text()", "Response_Status",
						"//CIFIndicator/cifID/text()", "cifID",
						"//FIBusinessException/ErrorDetail[1]/ErrorCode/text()", "ErrorCode",
						"//FIBusinessException/ErrorDetail[1]/ErrorDesc/text()", "ErrorDesc",
						"//FIBusinessException/ErrorDetail[1]/ErrorType/text()", "ErrorType"
						]
			}


			mutate{
				remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
			}
		}

		else if "Request details: " in [_PAYLOAD] and [_PAYLOAD] =~ "executeFinacleScript.xsd" {
            mutate {
                    gsub => [ "_PAYLOAD", "--------------------------------------------", "" ]
            }

            mutate{
                    split => ["_PAYLOAD" , "Request content: "]
                    add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
            }

            xml {
            source => "_PAYXML"
            remove_namespaces => true
            target => "parsed"
            xpath => [ "//MessageKey/RequestUUID/text()", "RequestUUID",
                                    "//MessageKey/ServiceRequestId/text()", "ServiceRequestId",
                                    "//MessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
                                    "//MessageKey/ChannelId/text()", "ChannelId",
                                    "//RequestMessageInfo/BankId/text()", "BankId",
                                    "//RequestMessageInfo/TimeZone/text()", "TimeZone",
                                    "//RequestMessageInfo/MessageDateTime/text()", "MessageDateTime",
                                    "//PasswordToken/UserId/text()", "UserId",
                                    "//ExecuteFinacleScriptInputVO/requestId/text()", "requestId",
                                    "//CIFKey/cifID/text()", "cifID",
                                    "//DFT_REQ/srlNum/text()", "srlNum",
                                    "//DFT_REQ/sessionID/text()", "sessionID",
                                    "//DFT_REQ/drAcctNum/text()", "drAcctNum",
                                    "//DFT_REQ/crAcctNum/text()", "crAcctNum",
                                    "//DFT_REQ/drAmt/text()", "drAmt",
                                    "//DFT_REQ/drCrncy/text()", "drCrncy",
                                    "//DFT_REQ/valueDate/text()", "valueDate",
                                    "//DFT_REQ/acctName/text()", "acctName",
                                    "//DFT_REQ/bkCode/text()", "bkCode",
                                    "//DFT_REQ/brCode/text()", "brCode",
                                    "//DFT_REQ/benName/text()", "benName",
                                    "//DFT_REQ/benBnkCode/text()", "benBnkCode",
                                    "//DFT_REQ/benBnkName/text()", "benBnkName",
                                    "//DFT_REQ/chrgFlg/text()", "chrgFlg",
                                    "//DFT_REQ/cEvntId/text()", "cEvntId",
                                    "//DFT_REQ/trnPrtclr/text()", "trnPrtclr",
                                    "//DFT_REQ/network/text()", "network",
                                    "//DNBT_REQ/srlNum/text()", "srlNum",
                                    "//DNBT_REQ/tranID/text()", "tranID",
                                    "//DNBT_REQ/identifier/text()", "identifier",
                                    "//FP_REQ/DrAcct/text()", "DrAcct",
                                    "//FP_REQ/TranAmt/text()", "TranAmt",
                                    "//FP_REQ/PmtType/text()", "PmtType",
                                    "//FP_REQ/Channel/text()", "Channel"

                            ]
            }

                        mutate {
                                convert => ["drAmt", "float"]
                                convert => ["TranAmt", "float"]

                        }
            mutate{
                    remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
            }
    }

		else if "Response received : " in [_PAYLOAD] and [_PAYLOAD] =~ "executeFinacleScript.xsd" {

            mutate{
				split => ["_PAYLOAD" , "Response received : "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
            }

            xml {
				source => "_PAYXML"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//RequestMessageKey/RequestUUID/text()", "RequestUUID",
							"//RequestMessageKey/ServiceRequestId/text()", "ServiceRequestId",
							"//RequestMessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
							"//RequestMessageKey/ChannelId/text()", "ChannelId",
							"//ResponseMessageInfo/BankId/text()", "BankId",
							"//ResponseMessageInfo/TimeZone/text()", "TimeZone",
							"//ResponseMessageInfo/MessageDateTime/text()", "MessageDateTime",
							"//HostTransaction/Status/text()", "Response_Status",
							"//DFT_RES/srlNum/text()", "srlNum",
							"//DFT_RES/tranID/text()", "tranID",
							"//DFT_RES/tranDate/text()", "tranDate",
							"//DFT_RES/status/text()", "DFT_Status",
							"//DNBT_RES/srlNum/text()", "srlNum",
							"//DNBT_RES/status/text()", "DNBT_Status",
							"//FP_RES/DrAcct/text()", "DrAcct",
							"//FP_RES/TranAmt/text()", "TranAmt",
							"//FP_RES/status/text()", "FP_Status",
							"//ErrorDetail/ErrorCode/text()", "ErrorCode",
							"//ErrorDetail/ErrorDesc/text()", "ErrorDesc",
							"//ErrorDetail/ErrorType/text()", "ErrorType"
						]
            }

			mutate {
				convert => ["drAmt", "float"]
				convert => ["TranAmt", "float"]

			}
            mutate{
				remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
            }
		}

		else if "Request details: " in [_PAYLOAD] and "PmtAdd" in [_PAYLOAD]{
            mutate {
				gsub => [ "_PAYLOAD", "--------------------------------------------", "" ]
            }

            mutate{
				split => ["_PAYLOAD" , "Request content: "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
            }

            xml {
				source => "_PAYXML"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//MessageKey/RequestUUID/text()", "RequestUUID",
							"//MessageKey/ServiceRequestId/text()", "ServiceRequestId",
							"//MessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
							"//MessageKey/ChannelId/text()", "ChannelId",
							"//RequestMessageInfo/BankId/text()", "BankId",
							"//RequestMessageInfo/TimeZone/text()", "TimeZone",
							"//RequestMessageInfo/MessageDateTime/text()", "MessageDateTime",
							"//PasswordToken/UserId/text()", "UserId",
							"//PmtAddRq/PmtProduct/text()", "PmtProduct",
							"//DrAcct/AcctId/text()", "DrAcct",
							"//RemitAmt/amountValue/text()", "RemitAmt",
							"//ChrgAcct/AcctId/text()", "ChrgAcct",
							"//BeneficiaryDtls/AcctId/text()", "BenAcct",
							"//BeneficiaryDtls/Name/text()", "BenName",
							"//BeneficiaryDtls/BankInfo/BankId/text()", "BenBankId",
							"//PmtSysId/text()", "PmtSysId",
							"//TranFromAcct/AcctId/text()", "TranFromAcct",
							"//TranToAcct/AcctId/text()", "TranToAcct",
							"//CrAcct/AcctId/text()", "CrAcct",
							"//ExchRate/text()", "ExchRate",
							"//PmtAdd_CustomData/REMARKS/text()", "REMARKS",
							"//PmtAdd_CustomData/FREETEXT4/text()", "FREETEXT4",
							"//PmtAdd_CustomData/EVENTTYPE/text()", "EVENTTYPE",
							"//PmtAdd_CustomData/EVENTID/text()", "EVENTID",
							"//PmtAdd_CustomData/REMITINFO1/text()", "REMITINFO1"
                           ]
            }
			mutate {
				convert => ["RemitAmt", "float"]

			}
            mutate{
				remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
            }
		}

		else if "Response received : " in [_PAYLOAD] and "PmtAdd" in [_PAYLOAD]{

            mutate{
				split => ["_PAYLOAD" , "Response received : "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
            }

            xml {
				source => "_PAYXML"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//RequestMessageKey/RequestUUID/text()", "RequestUUID",
							"//RequestMessageKey/ServiceRequestId/text()", "ServiceRequestId",
							"//RequestMessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
							"//RequestMessageKey/ChannelId/text()", "ChannelId",
							"//ResponseMessageInfo/BankId/text()", "BankId",
							"//ResponseMessageInfo/TimeZone/text()", "TimeZone",
							"//ResponseMessageInfo/MessageDateTime/text()", "MessageDateTime",
							"//HostTransaction/Status/text()", "Response_Status",
							"//PmtAddResponse/PmtOrderId/text()", "PmtOrderId",
							"//FIBusinessException/ErrorDetail[1]/ErrorCode/text()", "ErrorCode",
							"//FIBusinessException/ErrorDetail[1]/ErrorDesc/text()", "ErrorDesc",
							"//FIBusinessException/ErrorDetail[1]/ErrorType/text()", "ErrorType",
							"//FIBusinessException/ErrorDetail[2]/ErrorCode/text()", "ErrorCode2",
							"//FIBusinessException/ErrorDetail[2]/ErrorDesc/text()", "ErrorDesc2",
							"//FIBusinessException/ErrorDetail[2]/ErrorType/text()", "ErrorType2"
                        ]
            }


            mutate{
				remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
            }
		}

		else if "Request details: " in [_PAYLOAD] and [_PAYLOAD] =~ "getExchangeRateForRateCode.xsd"{

            mutate {
				gsub => [ "_PAYLOAD", "--------------------------------------------", "" ]
            }

            mutate{
				split => ["_PAYLOAD" , "Request content: "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
            }

            xml {
				source => "_PAYXML"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//MessageKey/RequestUUID/text()", "RequestUUID",
							"//MessageKey/ServiceRequestId/text()", "ServiceRequestId",
							"//MessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
							"//MessageKey/ChannelId/text()", "ChannelId",
							"//RequestMessageInfo/BankId/text()", "BankId",
							"//RequestMessageInfo/TimeZone/text()", "TimeZone",
							"//RequestMessageInfo/MessageDateTime/text()", "MessageDateTime",
							"//PasswordToken/UserId/text()", "UserId",
							"//ExchangeRateForRateCodeInputVO/fromCrncyCode/text()", "fromCrncyCode",
							"//ExchangeRateForRateCodeInputVO/rateCode/text()", "rateCode",
							"//ExchangeRateForRateCodeInputVO/toCrncyCode/text()", "toCrncyCode"
                        ]
            }


            mutate{
				remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
            }
		}


		else if "Response received : " in [_PAYLOAD] and [_PAYLOAD] =~ "getExchangeRateForRateCode.xsd"{

            mutate{
				split => ["_PAYLOAD" , "Response received : "]
				add_field => ["_PAYXML", "%{[_PAYLOAD][1]}" ]
            }

            xml {
				source => "_PAYXML"
				remove_namespaces => true
				target => "parsed"
				xpath => [ "//RequestMessageKey/RequestUUID/text()", "RequestUUID",
							"//RequestMessageKey/ServiceRequestId/text()", "ServiceRequestId",
							"//RequestMessageKey/ServiceRequestVersion/text()", "ServiceRequestVersion",
							"//RequestMessageKey/ChannelId/text()", "ChannelId",
							"//ResponseMessageInfo/BankId/text()", "BankId",
							"//ResponseMessageInfo/TimeZone/text()", "TimeZone",
							"//ResponseMessageInfo/MessageDateTime/text()", "MessageDateTime",
							"//HostTransaction/Status/text()", "Response_Status",
							"//ExchangeRateForRateCodeOutputVO/fxdCrncyCode/text()", "fxdCrncyCode",
							"//ExchangeRateForRateCodeOutputVO/fxdCrncyUnits/text()", "fxdCrncyUnits",
							"//ExchangeRateForRateCodeOutputVO/varCrncyCode/text()", "varCrncyCode",
							"//ExchangeRateForRateCodeOutputVO/varCrncyUnits/text()", "varCrncyUnits"
                          ]
            }


            mutate{
				remove_field => [ "_PAYXML", "_PAYLOAD", "parsed"]
            }
		}

		mutate{
			remove_field => [ "_INFO_UD", "omessage", "_INFO"]
		}

    }

    else if "FATAL - LoggingInfoVO={" in [flowfile] {

		mutate {
			copy => { "flowfile" => "message" }
		}

        mutate{
            add_field => ["logtype", "fatlog"]
        }

        mutate{
            remove_field => [ "flowfile"]
		}


	}


}

output{

	if [logtype] in ["hiflog","fatlog","msglog","errlog"] {
		elasticsearch {
			ssl => true
			cacert => '/etc/logstash/ca.crt'
			hosts => "https://127.0.0.1:9200"
			user => elastic
			password => *******
			manage_template => "false"
			template_name => "stbtemplate_prod"
			index => "%{[logtype]}-%{+YYYY.MM.dd}"
		}

	}

	else{
		elasticsearch {
			ssl => true
			cacert => '/etc/logstash/ca.crt'
			hosts => "https://127.0.0.1:9200"
			user => elastic
			password => *******
		}

	}
}
