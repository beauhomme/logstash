
#Filebeats are installed on the Finacle WebServers, AppServers and CoreServers. Logs are then shipped into different Kafka Topics. Logstash then uses the Kafka input plugin to subscribe to the different topics created for the logs and goes on to process/parse the logs. 

input {
	kafka {
		bootstrap_servers => "127.0.0.1:9081,127.0.0.1:9081,127.0.0.1:9081"
		id => "cbclogs"
		topics => ["cbclogs"]
		decorate_events => true
		codec => json
		tags => ["cbclogs"]
		}

	kafka {
		bootstrap_servers => "127.0.0.1:9081,127.0.0.1:9081,127.0.0.1:9081"
		id => "uniserevt"
		topics => ["uniserevt", "uniserevtlogs"]
		decorate_events => true
		tags => ["uniserevt"]
		codec => json
	}

	kafka {
		bootstrap_servers => "127.0.0.1:9081,127.0.0.1:9081,127.0.0.1:9081"
		id => "cdcilogs"
		topics => ["cdcilogs"]
		decorate_events => true
		tags => ["cdcilogs"]
		codec => json
	}

	lumberjack{
		port => 10514
		ssl_certificate => "/etc/logstash/DEV-logstash.crt"
		ssl_key => "/etc/logstash/DEV-logstash.key"
		codec => multiline{
		  pattern => "^================================================================================"
		  negate => true
		  what => "previous"
		   }
		}

	kafka {
		bootstrap_servers => "127.0.0.1:9081,127.0.0.1:9081,127.0.0.1:9081"
		id => "finwebaccesslogs"
		topics => ["finwebaccesslogs"]
		decorate_events => true
		codec => json
		tags => ["finwebaccesslogs"]
		}
}


filter {
	#Handling/Parsing the various Web Access Logs. Mostly Apache Logs
	if [logtype] in ["accesslog", "sslaccesslog","finwebaccesslogs"] or [source] =~ "access.log"  {
	   grok {
		   match => ["message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}","message" , "%{COMMONAPACHELOG}+%{GREEDYDATA:extra_fields}", "message", '(%{IPORHOST:clientip}|-) %{IPORHOST:destinationip} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} (?:%{NUMBER:keepalive}|-) (?:%{NUMBER:ssl_bytes}|-)']
		   patterns_dir => ["/etc/logstash/patterns"]
		   overwrite => [ "message" ]
	   }

		mutate{
				add_field => ["Timestamp", "%{timestamp}"]
		}

	   mutate {
		  convert => ["response", "integer"]
		  convert => ["bytes", "integer"]
			  convert => ["ssl_bytes", "integer"]
		  convert => ["responsetime", "float"]
	   }

	   geoip {
		  source => "clientip"
		  target => "geoip"
		  add_tag => [ "apache-geoip" ]
	   }

	   useragent {
		  source => "user_agent"
	   }

		 mutate{
		 remove_field => [ "timestamp"]
		}
	}

    else if [logtype] in ["errorlog"] or [source] =~ "error.log" {
	   grok {
		  match => ["message", "\[%{WORD:dayname} %{WORD:month} %{DATA:day} %{DATA:hour}:%{DATA:minute}:%{DATA:second} %{YEAR:year}\] \[%{NOTSPACE:loglevel}\] (?:\[client %{IPORHOST:clientip}\] ){0,1}%{GREEDYDATA:message}"]
		  overwrite => [ "message" ]
	   }
	   mutate{
		  add_field =>
		  {
			 "time_stamp" => "%{day}/%{month}/%{year}:%{hour}:%{minute}:%{second}"
		  }
	   }
		mutate{
				add_field => ["Timestamp", "%{time_stamp}"]
		}

	   mutate {
		  remove_field => [ "time_stamp","day","dayname","month","hour","minute","second","year"]
	   }
}

	#Parsing Finacle cbclogs 
    else if "cbclogs" in [tags] or [logtype] == "cbclogs"{
        mutate{
                add_field => ["omessage", "%{message}"]
        }

		if "EMP" or "PSL" in ["omessage"] and "RBX" or "EBK" or "BWY" not in ["omessage"]{
			mutate{
				split => ["omessage" , "Pid: "]
				add_field => ["_trans_zero", "%{[omessage][0]}" ]
				add_field => ["_trans_one", "%{[omessage][1]}" ]
				add_field => ["_trans_two", "%{[omessage][2]}" ]
				add_field => ["_trans_two_2", "%{[omessage][2]}" ]
				add_field => ["_trans_three", "%{[omessage][3]}" ]
				add_field => ["_trans_four", "%{[omessage][4]}" ]
				add_field => ["_trans_five", "%{[omessage][5]}" ]
				add_field => ["_trans_five_2", "%{[omessage][5]}" ]
			}

			grok {
			   match => [ "_trans_two_2","[0-9].* Received At: %{DATESTAMP:received_at}%{GREEDYDATA}" ]
			}

			grok {
			   match => [ "_trans_five_2","[0-9].* Sent At: %{DATESTAMP:sent_at}%{GREEDYDATA}" ]
			}

			if [received_at] {
				mutate{
					add_field => ["log_received", "%{received_at}"]
					add_field => ["log_received2", "%{received_at}"]
					add_field => ["log_received3", "%{received_at}"]
				}
			}
			
			if [sent_at] {

				mutate{
					add_field => ["log_sent", "%{sent_at}"]
					add_field => ["log_sent2", "%{sent_at}"]
					add_field => ["log_sent3", "%{sent_at}"]
				}

			}

			if [received_at] and [sent_at] {
				ruby {
					init => "require 'time'"
					code => "
							received_by_finacle   = (Time.parse(event.get('received_at')).to_f)*1000;
							sent_out_by_finacle   = (Time.parse(event.get('sent_at')).to_f)*1000;
							timetaken = (sent_out_by_finacle - received_by_finacle) rescue nil;
							event.set('time_delta',timetaken);
							event.set('epoch_received_at_in_milliseconds',received_by_finacle);
							event.set('epoch_sent_at_in_milliseconds',sent_out_by_finacle);
							"
					add_tag => [ "calculated_time_difference" ]
				}
			}

			date {
				match => [ "epoch_received_at_in_milliseconds", "UNIX_MS" ]
				target => "log_received"
			}

			date {
				match => [ "epoch_sent_at_in_milliseconds", "UNIX_MS" ]
				target => "log_sent"
			}


			date {
				match => [ "epoch_received_at_in_milliseconds", "UNIX_MS" ]
				target => "log_received3"
			}

			date {
				match => [ "epoch_sent_at_in_milliseconds", "UNIX_MS" ]
				target => "log_sent3"
			}

			kv {
				source => "_trans_two"
				field_split => "\n"
				value_split => ":"
				include_keys => [ "acqBankCode       ",  "approvalCode             ",  "availBal          ",  "balCrncy          ",  "bankCode          ",  "busDate           ",  "cdcI              ",  "command           ",  "custCardId        ", "dccId             ",  "destIBR           ",  "ffdBal            ",  "Field 002", "Field 003",  "Field 004",  "Field 011",  "Field 012",  "Field 017",  "Field 024",  "Field 032",  "Field 033", "Field 034", "Field 037", "Field 038",  "Field 039", "Field 041", "Field 042",  "Field 043", "Field 046", "Field 048",  "Field 049",  "Field 059",  "Field 093",  "Field 094", "Field 102", "Field 123", "Field 124",  "Field 125", "Field 126", "Field 127", "floatBal          ",  "foracid           ",  "ledgBal           ",  "MessageId",  "Pid",  "qualifier         ",  "reservedField1    ", "reservedField2    ", "reservedField3    ", "respCode          ",  "serialNum         ",  "solId             ",  "stlmntAmt         ",  "stlmntCrncy       ",  "subsystem",  "sysDateTime       ",  "traceFlg          ",  "tranAmt           ",  "tranCrncy         ",  "userDefBal        ",  "userField2        ",  "version           ", "fee               ", "devType           ", "deviceId          ", "devOwnerId        ", "stlmntFee         ", "CardAcceptorName  "]
				trim_key => "<>\[\],"
				trim_value => "<>\[\],"
			}

			kv {
				source => "_trans_three"
				field_split => "\n"
				value_split => ":"
				include_keys => [ "acqBankCode       ",  "approvalCode             ",  "availBal          ",  "balCrncy          ",  "bankCode          ",  "busDate           ",  "cdcI              ",  "command           ",  "custCardId        ", "dccId             ",  "destIBR           ",  "ffdBal            ",  "Field 002", "Field 003",  "Field 004",  "Field 011",  "Field 012",  "Field 017",  "Field 024",  "Field 032",  "Field 033", "Field 034", "Field 037", "Field 038",  "Field 039", "Field 041", "Field 042",  "Field 043", "Field 046", "Field 048",  "Field 049",  "Field 059",  "Field 093",  "Field 094", "Field 102", "Field 123", "Field 124",  "Field 125", "Field 126", "Field 127", "floatBal          ",  "foracid           ",  "ledgBal           ",  "MessageId",  "Pid",  "qualifier         ",  "reservedField1    ", "reservedField2    ", "reservedField3    ", "respCode          ",  "serialNum         ",  "solId             ",  "stlmntAmt         ",  "stlmntCrncy       ",  "subsystem",  "sysDateTime       ",  "traceFlg          ",  "tranAmt           ",  "tranCrncy         ",  "userDefBal        ",  "userField2        ",  "version           ", "fee               ", "devType           ", "deviceId          ", "devOwnerId        ", "stlmntFee         ", "CardAcceptorName  "]
				trim_key => "<>\[\],"
				trim_value => "<>\[\],"
			}
			kv {
				source => "_trans_four"
				field_split => "\n"
				value_split => ":"
				include_keys => [ "acqBankCode       ",  "approvalCode             ",  "availBal          ",  "balCrncy          ",  "bankCode          ",  "busDate           ",  "cdcI              ",  "command           ",  "custCardId        ", "dccId             ",  "destIBR           ",  "ffdBal            ",  "Field 002", "Field 003",  "Field 004",  "Field 011",  "Field 012",  "Field 017",  "Field 024",  "Field 032",  "Field 033", "Field 034", "Field 037", "Field 038",  "Field 039", "Field 041", "Field 042",  "Field 043", "Field 046", "Field 048",  "Field 049",  "Field 059",  "Field 093",  "Field 094", "Field 102", "Field 123", "Field 124",  "Field 125", "Field 126", "Field 127", "floatBal          ",  "foracid           ",  "ledgBal           ",  "MessageId",  "Pid",  "qualifier         ",  "reservedField1    ", "reservedField2    ", "reservedField3    ", "respCode          ",  "serialNum         ",  "solId             ",  "stlmntAmt         ",  "stlmntCrncy       ",  "subsystem",  "sysDateTime       ",  "traceFlg          ",  "tranAmt           ",  "tranCrncy         ",  "userDefBal        ",  "userField2        ",  "version           ", "fee               ", "devType           ", "deviceId          ", "devOwnerId        ", "stlmntFee         ", "CardAcceptorName  "]
				trim_key => "<>\[\],"
				trim_value => "<>\[\],"
			}
			kv {
				source => "_trans_five"
				field_split => "\n"
				value_split => ":"
				include_keys => [ "acqBankCode       ",  "approvalCode             ",  "availBal          ",  "balCrncy          ",  "bankCode          ",  "busDate           ",  "cdcI              ",  "command           ",  "custCardId        ", "dccId             ",  "destIBR           ",  "ffdBal            ",  "Field 002", "Field 003",  "Field 004",  "Field 011",  "Field 012",  "Field 017",  "Field 024",  "Field 032",  "Field 033", "Field 034", "Field 037", "Field 038",  "Field 039", "Field 041", "Field 042",  "Field 043", "Field 046", "Field 048",  "Field 049",  "Field 059",  "Field 093",  "Field 094", "Field 102", "Field 123", "Field 124",  "Field 125", "Field 126", "Field 127", "floatBal          ",  "foracid           ",  "ledgBal           ",  "MessageId",  "Pid",  "qualifier         ",  "reservedField1    ", "reservedField2    ", "reservedField3    ", "respCode          ",  "serialNum         ",  "solId             ",  "stlmntAmt         ",  "stlmntCrncy       ",  "subsystem",  "sysDateTime       ",  "traceFlg          ",  "tranAmt           ",  "tranCrncy         ",  "userDefBal        ",  "userField2        ",  "version           ", "fee               ", "devType           ", "deviceId          ", "devOwnerId        ", "stlmntFee         ", "CardAcceptorName  " ]
				trim_key => "<>\[\],"
				trim_value => "<>\[\],"
			}

			mutate{
				remove_field => [ "_trans_zero", "_trans_two", "_trans_two_2", "_trans_one", "_trans_three", "_trans_four","omessage", "_trans_five", "_trans_five_2"]
			}


		}
		
		else {
			mutate{
				split => ["omessage" , "<"]
				add_field => ["_trans_zero", "%{[omessage][0]}" ]
				add_field => ["_trans_one", "%{[omessage][1]}" ]
				add_field => ["_trans_two", "%{[omessage][2]}" ]
				add_field => ["_trans_three", "%{[omessage][3]}" ]
				add_field => ["_trans_four", "%{[omessage][4]}" ]
				add_field => ["_trans_four_2", "%{[omessage][4]}" ]
			}
			grok {
			   match => [ "_trans_zero","%{GREEDYDATA}Pid: [0-9].* Received At: %{DATESTAMP:received_at}%{GREEDYDATA}" ]
			}

			grok {
			   match => [ "_trans_four_2","%{GREEDYDATA}Pid: [0-9].* Sent At: %{DATESTAMP:sent_at}%{GREEDYDATA}" ]
			}

            if [received_at] {
				mutate{
					add_field => ["log_received", "%{received_at}"]
					add_field => ["log_received2", "%{received_at}"]
					add_field => ["log_received3", "%{received_at}"]
				}
            }
			if [sent_at] {

				mutate{
					add_field => ["log_sent", "%{sent_at}"]
					add_field => ["log_sent2", "%{sent_at}"]
					add_field => ["log_sent3", "%{sent_at}"]
				}

			}

			if [received_at] and [sent_at] {
				ruby {
					init => "require 'time'"
					code => "
							received_by_finacle   = (Time.parse(event.get('received_at')).to_f)*1000;
							sent_out_by_finacle   = (Time.parse(event.get('sent_at')).to_f)*1000;
							timetaken = (sent_out_by_finacle - received_by_finacle) rescue nil;
							event.set('time_delta',timetaken);
							event.set('epoch_received_at_in_milliseconds',received_by_finacle);
							event.set('epoch_sent_at_in_milliseconds',sent_out_by_finacle);
							"
					add_tag => [ "calculated_time_difference" ]
				}
			}

			date {
				match => [ "epoch_received_at_in_milliseconds", "UNIX_MS" ]
				target => "log_received"
			  }

			date {
				match => [ "epoch_sent_at_in_milliseconds", "UNIX_MS" ]
				target => "log_sent"
			  }

			kv {
                source => "_trans_three"
                field_split => "\n"
                value_split => ":"
				include_keys => [ "acqBankCode       ",  "approvalCode             ",  "availBal          ",  "balCrncy          ",  "bankCode          ",  "busDate           ",  "cdcI              ",  "command           ",  "custCardId        ", "dccId             ",  "destIBR           ",  "ffdBal            ",  "Field 002", "Field 003",  "Field 004",  "Field 011",  "Field 012",  "Field 017",  "Field 024",  "Field 032",  "Field 033", "Field 034", "Field 037", "Field 038",  "Field 039", "Field 041", "Field 042",  "Field 043", "Field 046", "Field 048",  "Field 049",  "Field 059",  "Field 093",  "Field 094", "Field 102", "Field 123", "Field 124",  "Field 125", "Field 126", "Field 127", "floatBal          ",  "foracid           ",  "ledgBal           ",  "MessageId",  "Pid",  "qualifier         ",  "reservedField1    ", "reservedField2    ", "reservedField3    ", "respCode          ",  "serialNum         ",  "solId             ",  "stlmntAmt         ",  "stlmntCrncy       ",  "subsystem",  "sysDateTime       ",  "traceFlg          ",  "tranAmt           ",  "tranCrncy         ",  "userDefBal        ",  "userField2        ",  "version           ", "fee               ", "devType           ", "deviceId          ", "devOwnerId        ", "stlmntFee         ", "CardAcceptorName  " ]
                trim_key => "<>\[\],"
                trim_value => "<>\[\],"
			}

			kv {
                source => "_trans_four"
                field_split => "\n"
                value_split => ":"
				include_keys => [ "acqBankCode       ",  "approvalCode             ",  "availBal          ",  "balCrncy          ",  "bankCode          ",  "busDate           ",  "cdcI              ",  "command           ",  "custCardId        ", "dccId             ",  "destIBR           ",  "ffdBal            ",  "Field 002", "Field 003",  "Field 004",  "Field 011",  "Field 012",  "Field 017",  "Field 024",  "Field 032",  "Field 033", "Field 034", "Field 037", "Field 038",  "Field 039", "Field 041", "Field 042",  "Field 043", "Field 046", "Field 048",  "Field 049",  "Field 059",  "Field 093",  "Field 094", "Field 102", "Field 123", "Field 124",  "Field 125", "Field 126", "Field 127", "floatBal          ",  "foracid           ",  "ledgBal           ",  "MessageId",  "Pid",  "qualifier         ",  "reservedField1    ", "reservedField2    ", "reservedField3    ", "respCode          ",  "serialNum         ",  "solId             ",  "stlmntAmt         ",  "stlmntCrncy       ",  "subsystem",  "sysDateTime       ",  "traceFlg          ",  "tranAmt           ",  "tranCrncy         ",  "userDefBal        ",  "userField2        ",  "version           ", "fee               ", "devType           ", "deviceId          ", "devOwnerId        ", "stlmntFee         ", "CardAcceptorName  " ]
                trim_key => "<>\[\],"
                trim_value => "<>\[\],"
			}
			
			mutate {
				convert => ["tranAmt", "float"]
				convert => ["stlmntAmt", "float"]
				convert => ["Field 004", "float"]
			}

			mutate{
				remove_field => [ "_trans_zero", "_trans_two", "_trans_one", "_trans_three", "_trans_four", "_trans_four", "omessage"]
			}
		}

	}
}


output {
	if [logtype] == "alertlog" {
		elasticsearch {
			ssl => true
			cacert => '/etc/logstash/ca.crt'
			hosts => "https://127.0.0.1:9200"
			user => elastic
			password => ********
			manage_template => "false"
			template_name => "stbtemplate_prod"
			index => "%{[logtype]}-%{+YYYY.MM.dd}"
		}
	}

	else if [logtype] in ["accesslog", "sslaccesslog", "sigalarmlog", "cbclog","cbclogs", "cdcilogs", "uniserevtlogs", "uniserevt", "finwebaccesslogs"] {
		elasticsearch {
			ssl => true
			cacert => '/etc/logstash/ca.crt'
			hosts => "https://127.0.0.1:9200"
			user => elastic
		    password => *******
            template_name => "stbtemplate_prod"
            index => "%{[logtype]}-%{+YYYY.MM.dd}"
        }
    }
    
	else{
		elasticsearch {
			ssl => true
			cacert => '/etc/logstash/ca.crt'
			hosts => "https://127.0.0.1:9200"
			user => elastic
			password => *******
		}

	}
}


